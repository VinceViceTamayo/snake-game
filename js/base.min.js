import{snakeSpeed,draw as drawSnake,update as updateSnake,getSnakeHead,snakeIntersection}from"./snake.min.js";import{update as updateFood,draw as drawFood}from"./food.min.js";import{outsideGrid}from"./grid.min.js";import{scoreAccumulator}from"./snake.min.js";export const moveUp=document.getElementById("move-up");export const moveDown=document.getElementById("move-down");export const moveLeft=document.getElementById("move-left");export const moveRight=document.getElementById("move-right");export const score=document.querySelector(".score");export const highScore=document.querySelector(".high-score");let lastRenderTime=0,gameOver=!1;const highScoreFromLocal=localStorage.getItem("highScore"),root=document.getElementById("root");highScore.innerHTML=null===highScoreFromLocal?"High score: 0":`High score: ${highScoreFromLocal}`;const main=currentTime=>{if(gameOver){const highScoreFromLocal=localStorage.getItem("highScore");return console.log(scoreAccumulator),console.log(highScoreFromLocal),parseInt(highScoreFromLocal)||localStorage.setItem("highScore",scoreAccumulator),parseInt(scoreAccumulator)>parseInt(highScoreFromLocal)&&localStorage.setItem("highScore",parseInt(scoreAccumulator)),void(confirm("You lost. Press ok to restart")&&(window.location="/"))}window.requestAnimationFrame(main);const secSinceLastRender=(currentTime-lastRenderTime)/1e3;secSinceLastRender<1/snakeSpeed||(lastRenderTime=currentTime,update(),draw())};window.requestAnimationFrame(main);const update=()=>{updateSnake(),updateFood(root),checkDeath()},draw=()=>{root.innerHTML="",drawSnake(root),drawFood(root)},checkDeath=()=>{gameOver=outsideGrid(getSnakeHead())||snakeIntersection()};