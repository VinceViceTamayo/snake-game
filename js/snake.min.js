import{getInputDirection}from"./input.min.js";import{score,highScore}from"./base.min.js";export const snakeSpeed=10;const snakeBody=[{x:10,y:11}];let newSegments=0;export let scoreAccumulator=0;export const update=()=>{addSegments();const inputDirection=getInputDirection();for(let i=snakeBody.length-2;i>=0;i--)snakeBody[i+1]={...snakeBody[i]};snakeBody[0].x+=inputDirection.x,snakeBody[0].y+=inputDirection.y};export const draw=root=>{snakeBody.forEach(segment=>{const snakeElement=document.createElement("div");snakeElement.style.gridRowStart=segment.y,snakeElement.style.gridColumnStart=segment.x,snakeElement.classList.add("snake"),root.appendChild(snakeElement)})};export const expandSnake=amount=>{scoreAccumulator++,score.innerHTML=`Score: ${scoreAccumulator}`,newSegments+=amount};export const onSnake=(position,{ignoreHead:ignoreHead=!1}={})=>snakeBody.some((segment,index)=>(!ignoreHead||0!==index)&&equalPositions(segment,position));export const getSnakeHead=()=>snakeBody[0];export const snakeIntersection=()=>onSnake(snakeBody[0],{ignoreHead:!0});const equalPositions=(pos1,pos2)=>pos1.x===pos2.x&&pos1.y===pos2.y,addSegments=()=>{for(let i=0;i<newSegments;i++)snakeBody.push({...snakeBody[snakeBody.length-1]});newSegments=0};